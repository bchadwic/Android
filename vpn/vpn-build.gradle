/*
 * Copyright (c) 2020 DuckDuckGo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'com.squareup.anvil'
}

apply from: "$rootDir/spotless.gradle"

android {
    compileSdkVersion compile_sdk
    buildToolsVersion tools_build_version

    defaultConfig {
        minSdkVersion min_sdk
        targetSdkVersion target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
    anvil {
        generateDaggerFactories = true // default is false
    }
}

ext {
    workManager = "2.5.0-beta01"
    threetenabp = "1.3.0"
    threetenbp = "1.4.5"
    firebase = "26.0.0"
}

dependencies {
    implementation project(path: ':vpn-store')
    implementation project(path: ':app-store')
    implementation project(path: ':di')
    implementation project(path: ':common')
    implementation project(path: ':common-ui')
    implementation project(path: ':statistics')

    implementation Kotlin.stdlib.jdk7

    implementation AndroidX.core.ktx

    implementation AndroidX.appCompat
    implementation Google.android.material
    implementation AndroidX.constraintLayout

    implementation platform("com.google.firebase:firebase-bom:$firebase")
    implementation "com.google.firebase:firebase-crashlytics-ktx"

    implementation AndroidX.lifecycle.extensions
    implementation AndroidX.lifecycle.viewModelKtx
    implementation AndroidX.lifecycle.runtimeKtx
    implementation  AndroidX.lifecycle.commonJava8
    implementation AndroidX.lifecycle.liveDataKtx

    // Dagger
    compileOnly "org.glassfish:javax.annotation:10.0-b28"
    implementation Google.dagger

    implementation KotlinX.coroutines.core
    androidTestImplementation (KotlinX.coroutines.test) {
        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023
        // conflicts with mockito due to direct inclusion of byte buddy
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }

    implementation "com.jakewharton.threetenabp:threetenabp:$threetenabp"
    testImplementation "org.threeten:threetenbp:$threetenabp"

    implementation JakeWharton.timber

    implementation 'nl.dionsegijn:konfetti:1.2.5'

    // Room
    implementation AndroidX.room.runtime
    implementation AndroidX.room.rxJava2
    implementation AndroidX.room.ktx
    testImplementation AndroidX.room.testing
    androidTestImplementation AndroidX.room.testing

    // WorkManager
    implementation AndroidX.work.runtimeKtx
    implementation "androidx.work:work-multiprocess:$workManager"
    androidTestImplementation AndroidX.work.testing
    implementation AndroidX.work.rxJava2

    implementation Square.retrofit2.converter.moshi

    // Testing dependencies
    testImplementation Testing.mockito.kotlin
    testImplementation "junit:junit:_"
    testImplementation AndroidX.archCore.testing
    androidTestImplementation AndroidX.archCore.testing

    androidTestImplementation AndroidX.test.runner
    androidTestImplementation AndroidX.test.rules

    androidTestImplementation Testing.mockito.android
    androidTestImplementation Testing.mockito.kotlin
}